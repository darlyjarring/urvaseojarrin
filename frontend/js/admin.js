const API = "https://urvaseo-backend.onrender.com";

let map = null;
let puntos = [];
let markers = [];

// LÃ³gica de navegaciÃ³n por pestaÃ±as
document.addEventListener("DOMContentLoaded", () => {
Â  const links = document.querySelectorAll(".navbar a");
Â  const sections = document.querySelectorAll(".section");

Â  links.forEach(link => {
Â  Â  link.addEventListener("click", (e) => {
Â  Â  Â  e.preventDefault();
Â  Â  Â  const targetId = e.target.getAttribute("href").substring(1);

Â  Â  Â  links.forEach(l => l.classList.remove("active"));
Â  Â  Â  e.target.classList.add("active");

Â  Â  Â  sections.forEach(s => s.classList.remove("active"));
Â  Â  Â  document.getElementById(targetId + "-section").classList.add("active");

Â  Â  Â  // Cargar datos segÃºn la secciÃ³n
Â  Â  Â  if (targetId === "placas") {
Â  Â  Â  Â  cargarPlacas();
Â  Â  Â  } else if (targetId === "tareas") {
Â  Â  Â  Â  cargarPlacasParaSelect();
Â  Â  Â  Â  cargarRutasParaDatalist();
Â  Â  Â  Â  cargarTareas();
Â  Â  Â  } else if (targetId === "rutas") {
Â  Â  Â  Â  inicializarMapa();
Â  Â  Â  Â  cargarRutas();
Â  Â  Â  }
Â  Â  });
Â  });

Â  // Cargar la secciÃ³n de placas por defecto al iniciar
Â  cargarPlacas();
});

// ðŸ”¹ Funciones para la secciÃ³n de PLACAS
async function cargarPlacas() {
Â  const res = await fetch(`${API}/placas`);
Â  const placas = await res.json();
Â  const tablaPlacasBody = document.querySelector("#tablaPlacas tbody");
Â  tablaPlacasBody.innerHTML = "";

Â  placas.forEach((p, i) => {
Â  Â  const tr = document.createElement("tr");
Â  Â  const estadoTexto = p.activo ? "Activa" : "Inactiva";
Â  Â  const estadoClase = p.activo ? "status-active" : "status-inactive";
Â  Â  tr.innerHTML = `
Â  Â  Â  <td>${i + 1}</td>
Â  Â  Â  <td>${p.placa}</td>
Â  Â  Â  <td class="${estadoClase}">${estadoTexto}</td>
Â  Â  Â  <td><button onclick="editarPlaca('${p._id}', ${p.activo})">Editar</button></td>
Â  Â  `;
Â  Â  tablaPlacasBody.appendChild(tr);
Â  });
}

async function registrarPlaca() {
Â  const placa = document.getElementById("nuevaPlaca").value.trim();
Â  const activo = document.getElementById("estadoPlaca").value === "true";

Â  if (!placa) {
Â  Â  alert("Debe ingresar una placa");
Â  Â  return;
Â  }

Â  const res = await fetch(`${API}/placas`, {
Â  Â  method: "POST",
Â  Â  headers: { "Content-Type": "application/json" },
Â  Â  body: JSON.stringify({ placa, activo })
Â  });

Â  if (res.ok) {
Â  Â  document.getElementById("nuevaPlaca").value = "";
Â  Â  cargarPlacas();
Â  } else {
Â  Â  alert("Error al registrar la placa.");
Â  }
}

async function editarPlaca(id, estadoActual) {
Â  const nuevoEstadoPrompt = prompt("Ingrese el nuevo estado (activo/inactivo):", estadoActual ? "activo" : "inactivo");
Â  if (!nuevoEstadoPrompt) return;
Â  const nuevoEstadoLower = nuevoEstadoPrompt.toLowerCase();
Â  if (nuevoEstadoLower !== "activo" && nuevoEstadoLower !== "inactivo") {
Â  Â  alert("Estado invÃ¡lido. Por favor use 'activo' o 'inactivo'.");
Â  Â  return;
Â  }

Â  const activo = nuevoEstadoLower === "activo";
Â  await fetch(`${API}/placas/${id}`, {
Â  Â  method: "PUT",
Â  Â  headers: { "Content-Type": "application/json" },
Â  Â  body: JSON.stringify({ activo })
Â  });
Â  cargarPlacas();
}

// ðŸ”¹ Funciones para la secciÃ³n de TAREAS
async function cargarPlacasParaSelect() {
Â  const res = await fetch(`${API}/placas`);
Â  const placas = await res.json();
Â  const placaSelect = document.getElementById("placaSelect");
Â  placaSelect.innerHTML = "";
Â  placas.forEach(p => {
Â  Â  const option = document.createElement("option");
Â  Â  option.value = p.placa;
Â  Â  option.text = p.placa;
Â  Â  placaSelect.add(option);
Â  });
}

async function cargarRutasParaDatalist() {
Â  const res = await fetch(`${API}/rutas`);
Â  const rutas = await res.json();
Â  const rutaList = document.getElementById("rutaList");
Â  rutaList.innerHTML = "";
Â  rutas.forEach(r => {
Â  Â  const option = document.createElement("option");
Â  Â  option.value = r.nombre;
Â  Â  rutaList.appendChild(option);
Â  });
}

async function asignarTarea() {
Â  const placa = document.getElementById("placaSelect").value;
Â  const sector = document.getElementById("sectorInput").value;
Â  const turno = document.getElementById("turnoSelect").value;

Â  if (!placa || !sector) {
Â  Â  alert("Todos los campos son obligatorios");
Â  Â  return;
Â  }

Â  const res = await fetch(`${API}/tareas`, {
Â  Â  method: "POST",
Â  Â  headers: { "Content-Type": "application/json" },
Â  Â  body: JSON.stringify({ placa, sector, turno })
Â  });

Â  const data = await res.json();
Â  if (data.ok) alert("Tarea asignada âœ…");
Â  cargarTareas();
}

async function cargarTareas() {
Â  const tbody = document.querySelector("#tablaTareas tbody");
Â  try {
Â  Â  const res = await fetch(`${API}/tareas`);
Â  Â  if (!res.ok) {
Â  Â  Â  Â  throw new Error(`HTTP error! Status: ${res.status}`);
Â  Â  }
Â  Â  const tareas = await res.json();
Â  Â  
Â  Â  tbody.innerHTML = "";

Â  Â  tareas.forEach(t => {
Â  Â  Â  const tr = document.createElement("tr");
Â  Â  Â  
Â  Â  Â  tr.innerHTML = `
Â  Â  Â  Â  <td>${t.placa}</td>
Â  Â  Â  Â  <td>${t.sector}</td>
Â  Â  Â  Â  <td>${t.turno}</td>
Â  Â  Â  Â  <td>${t.estado}</td>
Â  Â  Â  `;
Â  Â  Â  tbody.appendChild(tr);

Â  Â  Â  if (t.estados_detareaxelemntoderuta && t.estados_detareaxelemntoderuta.length > 0) {
Â  Â  Â  Â  const trDetalle = document.createElement("tr");
Â  Â  Â  Â  trDetalle.classList.add("detalle-fila");
Â  Â  Â  Â  const tdDetalle = document.createElement("td");
Â  Â  Â  Â  tdDetalle.setAttribute("colspan", "4");
Â  Â  Â  Â  
Â  Â  Â  Â  let puntosHTML = `<ul class="punto-item-lista">`;
Â  Â  Â  Â  
Â  Â  Â  Â  t.estados_detareaxelemntoderuta.forEach(puntoEstado => {
Â  Â  Â  Â  Â  const puntoEnRuta = t.rutaId.puntos.find(p => p._id === puntoEstado.puntoId);
Â  Â  Â  Â  Â  const nombrePunto = puntoEnRuta ? puntoEnRuta.nombre : 'Desconocido';
Â  Â  Â  Â  Â  puntosHTML += `<li><strong>${nombrePunto}:</strong> ${puntoEstado.estado}</li>`;
Â  Â  Â  Â  });
Â  Â  Â  Â  puntosHTML += `</ul>`;
Â  Â  Â  Â  
Â  Â  Â  Â  tdDetalle.innerHTML = puntosHTML;
Â  Â  Â  Â  trDetalle.appendChild(tdDetalle);
Â  Â  Â  Â  tbody.appendChild(trDetalle);
Â  Â  Â  }
Â  Â  });
Â  } catch (error) {
Â  Â  console.error("Error al cargar las tareas:", error);
Â  Â  tbody.innerHTML = "<tr><td colspan='4'>Error al cargar las tareas. Revisa la consola para mÃ¡s detalles.</td></tr>";
Â  }
}


// ðŸ”¹ Funciones para la secciÃ³n de RUTAS
function inicializarMapa() {
Â  if (map) {
Â  Â  map.remove();
Â  }
Â  map = L.map('map').setView([-2.2, -79.9], 13);
Â  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);

Â  puntos = [];
Â  markers.forEach(m => map.removeLayer(m));
Â  markers = [];
Â  actualizarListaPuntos();

Â  map.on('click', function(e) {
Â  Â  const nombre = prompt("Nombre del punto (Ej: Recolector 1)");
Â  Â  if (!nombre) return;

Â  Â  const direccion = prompt("DirecciÃ³n del punto:");
Â  Â  if (!direccion) return;

Â  Â  const nuevoPunto = {
Â  Â  Â  nombre: nombre,
Â  Â  Â  direccion: direccion,
Â  Â  Â  lat: e.latlng.lat,
Â  Â  Â  lng: e.latlng.lng,
Â  Â  };
Â  Â  puntos.push(nuevoPunto);

Â  Â  const marker = L.marker(e.latlng, { draggable: true }).addTo(map);
Â  Â  marker.bindPopup(`<b>${nombre}</b><br>${direccion}`).openPopup();
Â  Â  markers.push(marker);
Â  Â  
Â  Â  marker.on('dragend', function(event) {
Â  Â  Â  const latlng = event.target.getLatLng();
Â  Â  Â  const index = markers.indexOf(marker);
Â  Â  Â  if (index !== -1) {
Â  Â  Â  Â  puntos[index].lat = latlng.lat;
Â  Â  Â  Â  puntos[index].lng = latlng.lng;
Â  Â  Â  }
Â  Â  });
Â  Â  actualizarListaPuntos();
Â  });
}

function actualizarListaPuntos() {
Â  const container = document.getElementById("puntosContainer");
Â  container.innerHTML = "";
Â  puntos.forEach((p, i) => {
Â  Â  const div = document.createElement("div");
Â  Â  div.classList.add("punto-item");
Â  Â  div.innerHTML = `
Â  Â  Â  <span>${p.nombre} - ${p.direccion}</span>
Â  Â  `;
Â  Â  container.appendChild(div);
Â  });
}

async function guardarRuta() {
Â  const nombreRuta = document.getElementById("nombreRuta").value.trim();
Â  if (!nombreRuta) {
Â  Â  return alert("Debe ingresar un nombre para la ruta.");
Â  }

Â  if (puntos.length === 0) {
Â  Â  return alert("Debe agregar al menos un punto a la ruta.");
Â  }

Â  try {
Â  Â  const res = await fetch(`${API}/rutas`, {
Â  Â  Â  method: "POST",
Â  Â  Â  headers: { "Content-Type": "application/json" },
Â  Â  Â  body: JSON.stringify({
Â  Â  Â  Â  nombre: nombreRuta,
Â  Â  Â  Â  puntos: puntos,
Â  Â  Â  }),
Â  Â  });
Â  Â  const data = await res.json();
Â  Â  if (data.ok) {
Â  Â  Â  alert("Ruta guardada con Ã©xito âœ…");
Â  Â  Â  puntos = [];
Â  Â  Â  markers.forEach(m => map.removeLayer(m));
Â  Â  Â  markers = [];
Â  Â  Â  actualizarListaPuntos();
Â  Â  Â  document.getElementById("nombreRuta").value = "";
Â  Â  Â  cargarRutas(); // Vuelve a cargar la tabla de rutas despuÃ©s de guardar
Â  Â  } else {
Â  Â  Â  alert("Error al guardar la ruta: " + data.error);
Â  Â  }
Â  } catch (err) {
Â  Â  console.error("Error al guardar la ruta:", err);
Â  Â  alert("Error de conexiÃ³n. Intenta de nuevo mÃ¡s tarde.");
Â  }
}

async function cargarRutas() {
    const tbody = document.querySelector("#tablaRutas tbody");
    try {
        const res = await fetch(`${API}/rutas`);
        if (!res.ok) {
            throw new Error(`HTTP error! Status: ${res.status}`);
        }
        const rutas = await res.json();

        tbody.innerHTML = "";

        rutas.forEach(r => {
            const tr = document.createElement("tr");
            
            // Fila principal para la ruta
            tr.innerHTML = `
                <td>${r.nombre}</td>
                <td>
                    <ul class="punto-item-lista">
                        ${r.puntos.map(p => `
                            <li>
                                <strong>${p.nombre}</strong> (${p.direccion})<br>
                                Lat: ${p.lat.toFixed(4)}, Lng: ${p.lng.toFixed(4)}
                            </li>
                        `).join('')}
                    </ul>
                </td>
            `;
            tbody.appendChild(tr);
        });
    } catch (error) {
        console.error("Error al cargar las rutas:", error);
        tbody.innerHTML = "<tr><td colspan='2'>Error al cargar las rutas. Revisa la consola para mÃ¡s detalles.</td></tr>";
    }
}
